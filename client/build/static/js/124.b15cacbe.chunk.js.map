{"version":3,"file":"static/js/124.b15cacbe.chunk.js","mappings":"iMA8BA,IA3BkC,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SACnC,GAAsCC,EAAAA,EAAAA,UAAS,GAAE,eAA1CC,EAAW,KAAEC,EAAc,KAClC,GAAwCF,EAAAA,EAAAA,UAAS,GAAE,eAA5CG,EAAY,KAAEC,EAAe,KAChCC,EAAe,WACjBH,EAAeI,OAAOC,YACtBH,EAAgBE,OAAOE,YACzB,EAOA,OALAC,EAAAA,EAAAA,YAAU,WAGR,OAFAJ,IACAC,OAAOI,iBAAiB,SAAUL,GAC3B,kBAAMC,OAAOK,oBAAoB,SAAUN,EAAc,CAClE,GAAG,KAED,8BACGF,GAAgB,KAAOF,GAAe,KACrC,+BACE,gBAAKW,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAS,UAC5C,SAAC,KAAmB,UAAEf,SAI1B,8BAAGA,KAIX,C,gJCpBMgB,EAAwB,SAAH,OAAMC,EAAO,EAAPA,QAAO,iBAAqB,IAAVA,GAAeC,QAAQ,GAAE,MA0D5E,UAxDmB,WACjB,OAAsCjB,EAAAA,EAAAA,UAAS,IAAG,eAA3CkB,EAAW,KAAEC,EAAc,KAClC,GAA8BnB,EAAAA,EAAAA,WAAS,GAAM,eAAtCoB,EAAO,KAAEC,EAAU,KACpBC,GAAUC,EAAAA,EAAAA,MAWhB,OAVAd,EAAAA,EAAAA,YAAU,WACRY,GAAW,GACXG,MAAMC,EAAAA,EAAAA,cAAkBC,MAAK,SAACC,GAC5BA,EAAKC,OAAOF,MAAK,SAACC,GAChBR,EAAeQ,EAAKA,MACpBN,GAAW,EACb,GACF,GACF,GAAG,KAGD,8BACGD,GACC,SAAC,IAAO,KAER,SAAC,KAAU,CACTS,UAAW,IACXC,UAAQ,EACRlB,MAAO,CAAEE,OAAQ,OAAQD,MAAO,QAAS,UAEzC,SAAC,IAAyB,WACxB,UAAC,KAAQ,CAACA,MAAO,IAAKC,OAAQ,IAAI,WAChC,SAAC,KAAG,CACFa,KAAMT,EACNa,GAAI,IACJC,GAAI,IACJC,WAAS,EACTC,MAAOnB,EACPoB,YAAa,IACbC,KAAK,UACLC,QAAQ,QAAO,SAEdnB,EAAYoB,KAAI,SAACC,EAAOC,GAAK,OAC5B,SAAC,KAAI,CACH5B,MAAO,CAAE6B,OAAQ,WAEjBL,KAAMM,EAAAA,EAAaF,EAAQE,EAAAA,EAAAA,QAC3BC,QAAS,kBAAMrB,EAAQsB,KAAK,SAAD,OAAUL,EAAMM,MAAO,GAAC,eAFtCL,GAGb,MAEA,KAEN,SAAC,IAAO,KACR,SAAC,KAAM,YAOrB,C,wDCjEA,IAcaE,EAAe,CAC1B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF,IA5BiB,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,U","sources":["Components/Charts/State/Container.jsx","Components/Charts/State/index.jsx","config/consts.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ResponsiveContainer } from \"recharts\";\n\nconst CustomResponsiveContainer = ({ children }) => {\n  const [windowWidth, setWindowWidth] = useState(0);\n  const [windowHeight, setWindowHeight] = useState(0);\n  let resizeWindow = () => {\n    setWindowWidth(window.innerWidth);\n    setWindowHeight(window.innerHeight);\n  };\n\n  useEffect(() => {\n    resizeWindow();\n    window.addEventListener(\"resize\", resizeWindow);\n    return () => window.removeEventListener(\"resize\", resizeWindow);\n  }, []);\n  return (\n    <>\n      {windowHeight >= 616 && windowWidth >= 616 ? (\n        <>\n          <div style={{ width: \"100%\", height: \"100%\" }}>\n            <ResponsiveContainer>{children}</ResponsiveContainer>\n          </div>\n        </>\n      ) : (\n        <>{children}</>\n      )}\n    </>\n  );\n};\nexport default CustomResponsiveContainer;\n","import React, { useEffect, useState } from \"react\";\nimport { Cell, Legend, Pie, PieChart, Tooltip } from \"recharts\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport { useHistory } from \"react-router-dom\";\nimport Spinner from \"../../Spinner\";\nimport CustomResponsiveContainer from \"./Container\";\nimport { CHART_COLORS } from \"../../../config/consts\";\nimport API from \"../../../api\";\n\nconst renderCustomizedLabel = ({ percent }) => `${(percent * 100).toFixed(0)}%`;\n\nconst ChartState = () => {\n  const [collegeData, setCollegeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    setLoading(true);\n    fetch(API.collegeChart).then((data) => {\n      data.json().then((data) => {\n        setCollegeData(data.data);\n        setLoading(false);\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Scrollbars\n          thumbSize={100}\n          autoHide\n          style={{ height: \"100%\", width: \"100%\" }}\n        >\n          <CustomResponsiveContainer>\n            <PieChart width={800} height={800}>\n              <Pie\n                data={collegeData}\n                cx={210}\n                cy={210}\n                labelLine\n                label={renderCustomizedLabel}\n                outerRadius={150}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {collegeData.map((entry, index) => (\n                  <Cell\n                    style={{ cursor: \"pointer\" }}\n                    key={`cell-${index}`}\n                    fill={CHART_COLORS[index % CHART_COLORS.length]}\n                    onClick={() => history.push(`state/${entry.name}`)}\n                  />\n                ))}\n              </Pie>\n              }\n              <Tooltip />\n              <Legend />\n            </PieChart>\n          </CustomResponsiveContainer>\n        </Scrollbars>\n      )}\n    </>\n  );\n};\n\nexport default ChartState;\n","const tagColor = [\n  \"#ffa39e\",\n  \"#ffbb96\",\n  \"#ffd591\",\n  \"#ffe58f\",\n  \"#fffb8f\",\n  \"#eaff8f\",\n  \"#b7eb8f\",\n  \"#87e8de\",\n  \"#91d5ff\",\n  \"#adc6ff\",\n  \"#d3adf7\",\n  \"#ffadd2\",\n];\nexport const CHART_COLORS = [\n  \"#0088FE\",\n  \"#00C49F\",\n  \"#FFBB28\",\n  \"#FF8042\",\n  \"#fe0033\",\n  \"#005fc4\",\n  \"#cb8c02\",\n  \"#a7a09b\",\n  \"#9652ba\",\n  \"#d603e5\",\n  \"#57ff28\",\n  \"#08cdef\",\n];\nexport default tagColor;\n"],"names":["children","useState","windowWidth","setWindowWidth","windowHeight","setWindowHeight","resizeWindow","window","innerWidth","innerHeight","useEffect","addEventListener","removeEventListener","style","width","height","renderCustomizedLabel","percent","toFixed","collegeData","setCollegeData","loading","setLoading","history","useHistory","fetch","API","then","data","json","thumbSize","autoHide","cx","cy","labelLine","label","outerRadius","fill","dataKey","map","entry","index","cursor","CHART_COLORS","onClick","push","name"],"sourceRoot":""}